<?php

namespace WideWeb\CRMBundle\Repository;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends \Doctrine\ORM\EntityRepository
{
    /**
    * \brief Планировшик
    * @param entity $user - текущий пользователь системы
    * @param array $status - статусы в которых может быть заявка
    * @param string $extraStatus - экстра статус. Используется для таба Встречи
    *
    * @return array $clients - клиенты подходящие под параметры
    */
    public function getClients($user, $status, $extraStatus = null, $dateToday = null, $searchText = null): array
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->leftJoin('c.manager', 'manager')
                   ->where('c.trash = 0')
                   ->andWhere('c.enabled = 1');

        if ($searchText) {
                $qb->andWhere('(c.first_name LIKE :search) OR (c.last_name LIKE :search) OR (c.phone LIKE :search)')
                   ->setParameter('search', '%' . $searchText . '%');
        }

        if ((!$user->isAdmin()) || ($user->hasRole('ROLE_ADMIN') && $user->getRegion()->getView())) {
                $qb->andWhere('manager = :manager')
                   ->setParameter('manager', $user);
        }

        if (!$user->hasRole('ROLE_SUPER_ADMIN')) {
                $qb->andWhere('c.type IN (:types)')
                   ->andWhere('c.region = :region')
                   ->setParameter('region', $user->getRegion())
                   ->setParameter('types', $user->getTypes());
        }
                   
        if ($extraStatus) {
                $qb->andWhere('c.status IN (:status) OR c.extraStatus = :extraStatus')
                   ->setParameter('extraStatus', $extraStatus)
                   ->setParameter('status', $status);
        } elseif (count($status) != 0) {
                $qb->andWhere('c.status IN (:status)')
                   ->setParameter('status', $status);
        }

        if ($dateToday) {
                $qb->andWhere('DATE(c.calendarStart) = :dateToday')
                   ->setParameter('dateToday', $dateToday);
        }
                $qb->orderBy('c.date_added', 'DESC');
    
        return $qb->getQuery()->getResult();
    }

   /**
    * \brief Планировшик. Просроченные заявки.
    * @param entity $user - текущий пользователь системы
    * @param date $dateToday - текущая дата в формате Y-m-d
    * @param array $status - статусы в которых может быть заявка
    * @param string $extraStatus - экстра статус. Используется для таба Встречи
    * @return array $clients - клиенты подходящие под мараметры
    */
    public function getOldClients($user, $status, $extraStatus = null, $dateToday, $searchText = null): array
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->innerJoin('c.region', 'r')
                   ->leftJoin('c.manager', 'manager')
                   ->where('c.trash = 0')
                   ->andWhere('c.enabled = 1')
                   ->andWhere('DATE(c.calendarStart) < :dateToday');

        if ($searchText) {
                $qb->andWhere('(c.first_name LIKE :search) OR (c.last_name LIKE :search) OR (c.phone LIKE :search)')
                   ->setParameter('search', '%' . $searchText . '%');
        }

        if ((!$user->isAdmin()) || ($user->isAdmin() && $user->getRegion()->getView())) {
                $qb->andWhere('c.manager = :manager')
                   ->andWhere('manager.region = c.region')
                   ->setParameter('manager', $user);
        }

        if (!$user->hasRole('ROLE_SUPER_ADMIN')) {
                $qb->andWhere('c.type IN (:types)')
                   ->setParameter('types', $user->getTypes())
                   ->andWhere('r IN (:regions)')
                   ->setParameter('regions', $user->getRegion());
        }

        if ($extraStatus) {
                $qb->andWhere('c.status IN (:status) OR c.extraStatus = :extraStatus')
                   ->setParameter('extraStatus', $extraStatus);
        } else {
                $qb->andWhere('c.status IN (:status)');
        }
                $qb->setParameter('status', $status)
                   ->setParameter('dateToday', $dateToday)
                   ->orderBy('c.date_added', 'DESC');
  
        return $qb->getQuery()->getResult();
    }

  /**
    * \brief Поиск клиентов
    * \details
    * Если $region = 1, то берутся клиенты регионального менеджера.
    *
    */
    public function getManagerCostumer($region = 0, $manager = 0, $user = 0)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->join('c.status', 's')
                   ->where('c.enabled = 1')
                   ->andWhere('c.trash = 0')
                   ->andWhere('s IN (:status)')
                   ->setParameter('status', array('5'));
        if ($region) {
                $qb->innerJoin('c.region', 'r')
                   ->andWhere('r IN (:regions)')
                   ->setParameter('regions', $user->getRegion()->toArray());
        } elseif ($magaer = 1) {
                $qb->join('c.manager', 'manager')
                   ->andWhere('(manager = :user) OR (:user MEMBER OF c.additionalManagers)')
                   ->setParameter('user', $user);
        }
                $qb->orderBy('c.date_added', 'DESC');
                
        return  $qb->getQuery()->getResult();
    }

    /**
    * \brief Фильтр заявок.
    *
    * @param date $date1 - дата поступления заявки с которой начинать поиск
    * @param date $date2 - дата окончания поступления заявки
    * @param array $status - идентификаторы статусов заявки
    * @param array $type - идентификаторы типа заявки
    * @param array $region - идентификаторы региона в котором находится заявка
    * @param array $source - идентификаторы источника с которого пришла заявка
    * @param array $manager - идентификаторы менеджера заявки
    *
    * \attention Приходят массивы, т.к. в фильтре возможно выбрать все типы элементов, т.е. массив элементов
    *
    * @return array $clients - все найденные заявки
    */
    public function filterClients($date1, $date2, $status, $type, $region, $source, $manager)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->where('DATE(c.date_added) >= :date1')
                   ->setParameter('date1', $date1)
                   ->andWhere('DATE(c.date_added) <= :date2')
                   ->setParameter('date2', $date2)
                   ->andWhere('c.status IN (:status)')
                   ->setParameter('status', $status)
                   ->andWhere('c.type IN (:type)')
                   ->setParameter('type', $type)
                   ->andWhere('c.region IN (:region)')
                   ->setParameter('region', $region)
                   ->andWhere('c.source IN (:source)')
                   ->setParameter('source', $source);
        if (count($manager) > 1) {
                $qb->andWhere('c.manager IN (:manager) or c.manager IS NULL');
        } else {
                $qb->andWhere('c.manager IN (:manager)');
        }
                $qb->setParameter('manager', $manager);
        
        return $qb->getQuery()->getResult();
    }

    /**
    * \brief Поиск заявок по дате
    *
    * @param date $startDate - начальная дата поиска заявок
    * @param date $endDate - конечная дата
    * @param int $status - идентификатор статуса заявки
    * @param entity $manager - текущий пользователь.
    *
    * @return array $clients
    */
    public function findClientsByDate($startDate, $endDate, $status, $manager)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c.id', 'c.calendarStart', 'c.callPriority', 'c as client')
                   ->innerJoin('c.region', 'r')
                   ->where('DATE(c.calendarStart) >= :startDate')
                   ->setParameter('startDate', $startDate)
                   ->andWhere('DATE(c.calendarStart) <= :endDate')
                   ->setParameter('endDate', $endDate)
                   ->andWhere('c.status = :status')
                   ->setParameter('status', $status)
                   ->addSelect('(CASE WHEN r.showLastName = 1 THEN c.last_name ELSE c.first_name END) as name');

        if ((!$manager->isAdmin()) || ($manager->hasRole('ROLE_ADMIN') && $manager->getRegion()->getView())) {
                $qb->andWhere('c.manager = :manager')
                   ->setParameter('manager', $manager);
        }
        if (!$manager->hasRole('ROLE_SUPER_ADMIN')) {
                $qb->andWhere('c.region IN (:regions)')
                   ->setParameter('regions', $manager->getRegion());
        }
                $qb->orderBy('c.calendarStart', 'DESC');
                   
        return  $qb->getQuery()->getResult();
    }

    /**
    * \brief Поиск заявок по всему региону
    *
    * @param array $regions - массив регионов для выборки заявок из них
    */
    public function findClientsByRegion($regions)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->innerJoin('c.region', 'r')
                   ->where('r IN (:regions)')
                   ->setParameter('regions', $regions);


        return $qb->getQuery()->getResult();
    }

    /**
    * \brief Статистика по менеджерам. Эффективность менеджеров. Количество лидов.
    *
    * @param entity $region - статистика по конкретному региону
    * @param $date - период времени
    */
    public function getCountLeadsManager($date, $region = null)
    {
        $qb = $this->createQueryBuilder('s')
                   ->select('s')
                   ->innerJoin('s.manager', 'manager')
                   ->andWhere('(s.date_added >= :dateStart)')
                   ->andWhere('(s.date_added <= :dateEnd)')
                   ->setParameter('dateStart', date('Y-m-d', strtotime($date['start'])))
                   ->setParameter('dateEnd', date('Y-m-d', strtotime($date['stop'])))
                   ->addSelect('COUNT(s.id) AS countLeads')
                   ->addSelect('SUM(s.meetCount) AS countMeet')
                   ->addSelect('s.id AS id')
                   ->andWhere('s.manager IS NOT NULL')
                   ->addSelect('CONCAT(CONCAT(manager.name, \' \'), manager.surname) AS managerName')
                   ->addSelect('manager.id AS managerId');

        if ($region) {
                $qb->andWhere('s.region = :region')
                   ->andWhere('manager.region = :region')
                   ->setParameter('region', $region);
        }
                $qb->groupBy('s.manager');

        return $qb->getQuery()->getResult();
    }

    /**
    * \brief Статистика по менеджерам. Эффективность менеджеров. Количество подписанных договоров.
    *
    * @param entity $region - статистика по конкретному региону
    * @param $date - период времени
    * @param array $clients - id клиентов по которым ведем поиск
    */
    public function getCountDogovorManager($date, $region, $clients)
    {
        $qb = $this->createQueryBuilder('s')
                     ->select('s')
                     ->innerJoin('s.manager', 'manager')
                     ->andWhere('(s.dateDogovor >= :dateStart)')
                     ->andWhere('(s.dateDogovor <= :dateEnd)')
                     ->setParameter('dateStart', date('Y-m-d', strtotime($date['start'])))
                     ->setParameter('dateEnd', date('Y-m-d', strtotime($date['stop'])))
                     ->addSelect('COUNT(s.id) as countDogovor')
                     ->addSelect('CONCAT(CONCAT(manager.name, \' \'), manager.surname) AS managerName')
                     ->andWhere('s.manager IS NOT NULL')
                     ->andWhere('s.id IN (:clients)')
                     ->setParameter('clients', $clients)
                     ->addSelect('manager.id AS managerId');

        if ($region) {
                $qb->andWhere('s.region = :region')
                   ->setParameter('region', $region);
        }
                  $qb->groupBy('s.manager');

        return $qb->getQuery()->getResult();
    }

    /**
     * Статистика по заявкам. Заявки по источникам.
     * @param  [date] $date   - период дат
     * @param  [entity] $region - регион по котоому ведем отбор заявок
     */
    public function statsPerSource($date, $region = null)
    {
        $qb = $this->createQueryBuilder('s')
                   ->select('COUNT(s) AS countClients')
                   ->leftJoin('s.source', 'source')
                   ->where('s.trash = 0')
                   ->andWhere('s.enabled = 1')
                   ->andWhere('(s.date_added >= :dateStart)')
                   ->andWhere('(s.date_added <= :dateEnd)')
                   ->andWhere('s.source IS NOT NULL')
                   ->setParameter('dateStart', date('Y-m-d', strtotime($date['start'])))
                   ->setParameter('dateEnd', date('Y-m-d', strtotime($date['stop'])))
                   ->addSelect('source.name AS sourceName')
                   ->groupBy('s.source');

        if ($region) {
                $qb->andWhere('s.region = :region')
                   ->setParameter('region', $region);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Статистика по заявкам. Причины отказов.
     * @param  [date] $date   - период дат
     * @param  [entity] $region - регион по котоому ведем отбор заявок
     */
    public function statsPerCause($date, $region = null)
    {
        $qb = $this->createQueryBuilder('s')
                   ->select('COUNT(s) AS countClients')
                   ->where('s.trash = 0')
                   ->andWhere('s.enabled = 1')
                   ->andWhere('(s.date_added >= :dateStart)')
                   ->andWhere('(s.date_added <= :dateEnd)')
                   ->andWhere('s.cause IS NOT NULL')
                   ->setParameter('dateStart', date('Y-m-d', strtotime($date['start'])))
                   ->setParameter('dateEnd', date('Y-m-d', strtotime($date['stop'])))
                   ->addSelect('s.cause AS causeName')
                   ->groupBy('s.cause');

        if ($region) {
                $qb->andWhere('s.region = :region')
                   ->setParameter('region', $region);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Статистика по заявкам. Заявки по типам
     * @param  [date] $date   - период дат
     * @param  [entity] $region - регион по котоому ведем отбор заявок
     */
    public function statsPerType($date, $region = null)
    {
        $qb = $this->createQueryBuilder('s')
                   ->select('COUNT(s) AS countClients')
                   ->where('s.trash = 0')
                   ->innerJoin('s.type', 'type')
                   ->andWhere('s.enabled = 1')
                   ->andWhere('(s.date_added >= :dateStart)')
                   ->andWhere('(s.date_added <= :dateEnd)')
                   ->andWhere('s.type IS NOT NULL')
                   ->setParameter('dateStart', date('Y-m-d', strtotime($date['start'])))
                   ->setParameter('dateEnd', date('Y-m-d', strtotime($date['stop'])))
                   ->addSelect('type.type AS typeName')
                   ->groupBy('s.type');

        if ($region) {
                $qb->andWhere('s.region = :region')
                   ->setParameter('region', $region);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Статистика по заявкам. Заявки по источнику с результатом выборке Одобрено и Выручка.
     * @param  [date] $date   - период дат
     * @param  [entity] $region - регион по котоому ведем отбор заявок
     */
    public function statsPerSourceOrProposal($date, $region)
    {
        $qb = $this->createQueryBuilder('s')
                   ->select('COUNT(s) as countClients', 's')
                   ->where('s.trash = 0')
                   ->innerJoin('CRMBundle:Proposal', 'p', 'WITH', 'p.client = s.id')
                   ->innerJoin('s.source', 'source')
                   ->andWhere('s.enabled = 1')
                   ->andWhere('s.source IS NOT NULL')
                   ->andWhere('(s.date_added >= :dateStart)')
                   ->andWhere('(s.date_added <= :dateEnd)')
                   ->setParameter('dateStart', date('Y-m-d', strtotime($date['start'])))
                   ->setParameter('dateEnd', date('Y-m-d', strtotime($date['stop'])))
                   ->addSelect('source.name AS sourceName')
                   ->addSelect('CASE WHEN p.rewardType = 1 THEN SUM(p.summ * p.reward / 100) ELSE SUM(p.reward) END reward')
                   ->addSelect('SUM(CASE WHEN p.state = 1 THEN 1 ELSE 0 END) AS countSuccess')
                   ->groupBy('s.source');

        if ($region) {
                $qb->andWhere('s.region = :region')
                   ->setParameter('region', $region);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Статистика по заявкам. Отказанные заявки
     * @param  [date] $date   - период дат
     * @param  [entity] $region - регион по котоому ведем отбор заявок
     */
    public function statsPerCauseFailed($date, $region)
    {
        $qb = $this->createQueryBuilder('s')
                   ->select('COUNT(s) as countClients')
                   ->where('s.trash = 0')
                   ->andWhere('s.enabled = 1')
                   ->andWhere('(s.date_added >= :dateStart)')
                   ->andWhere('(s.date_added <= :dateEnd)')
                   ->andWhere('s.cause IS NOT NULL')
                   ->setParameter('dateStart', date('Y-m-d', strtotime($date['start'])))
                   ->setParameter('dateEnd', date('Y-m-d', strtotime($date['stop'])))
                   ->addSelect('s.cause AS causeName')
                   ->groupBy('s.cause');

        if ($region) {
                $qb->andWhere('s.region = :region')
                   ->setParameter('region', $region);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Получение всех заявок для отчета
     * @param  [date] $date     [период выборки даты заявок]
     * @param  [array] $managers [массив менеджеров заявок]
     */
    public function getClientsInReport($date, $managers, $meet = null, $call = null)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->where('(c.date_added >= :dateStart)')
                   ->andWhere('(c.date_added <= :dateEnd)')
                   ->setParameter('dateStart', date('Y-m-d', strtotime($date['start'])))
                   ->setParameter('dateEnd', date('Y-m-d', strtotime($date['stop'])))
                   ->andWhere('c.manager IN (:managers)')
                   ->andWhere('c.status IS NOT NULL')
                   ->andWhere('c.source IS NOT NULL')
                   ->setParameter('managers', $managers);

        if ($meet) {
                $qb->innerJoin('CRMBundle:MeetStatistic', 'm', 'WITH', 'm.client = c.id')
                   ->andWhere('m.statusMeet = 1');
        }

        if ($call) {
                $qb->innerJoin('CRMBundle:CallStatistic', 'm', 'WITH', 'm.client = c.id')
                   ->andWhere('m.statusCall = 1');
        }

        return $qb->getQuery()->getResult();
    }
}